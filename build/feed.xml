<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ryan's Blog</title>
  <link rel="alternate" href="https://blog.ryanramsdell.dev" />
  <description>RSS feed for my blog</description>
  <id>https://blog.ryanramsdell.dev</id>
  <updated>22-06-2025T20:27:25Z</updated>
  <entry>
    <title>Fish Bag</title>
    <id>sewing/fish-bag/index.html</id>
    <updated>2025-06-14T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Fish bag" src="3.jpeg" /&gt;
&lt;img alt="Fish bag with guts" src="4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cross body fish bag" src="1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been a runner on-and-off since middle school, but I only just started running with a club this year. I&amp;rsquo;m loving the social aspect, but the club meets downtown, so I bike down before the run. &lt;/p&gt;
&lt;p&gt;Ever since my handlebars came loose on a ride back in 2020, I try not to go without a set of tools on me. And since I live in Texas, I sweat &lt;em&gt;a lot&lt;/em&gt; when I run: enter the need for a bag large enough to hold my tool set, a travel pump, and a spare shirt but small enough to stash away safely.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cross body fish bag" src="2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;The design I copied from a bag I saw floating on the &lt;a href="https://www.etsy.com/listing/1818293323/rainbow-trout-fish-crossbody-bag-sewing?gpla=1&amp;amp;gao=1&amp;amp;"&gt;internet&lt;/a&gt;. I&amp;rsquo;ve been learning to sew and figured this would be an easy enough project to do without a pattern and practice my own drafting abilities.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Striped pattern" src="9.jpeg" /&gt;
First step was to put together the striped pattern of the fish. I made two of these sections and backed them with some plain canvas to form a liner. Looking closely at the picture, you can see the first iteration chilling in the back. If I were to make this a third time I&amp;rsquo;d probably wait to attach the liner until I could hide the fins as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sewing on the head" src="10.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Joining two halves" src="11.jpeg" /&gt;
I&amp;rsquo;m terrible at taking step-by-step pictures, so by this point I had made all the fins, attached them, added the zipper, added the straps, and sewn on the button eyes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The old" src="13.jpeg" /&gt;
My first attempt at this fish turned out pretty well, except I did not properly wash the red fabric after dyeing it. I got caught in a sudden downpour biking back home one day and the colors bled which really ruined the effect I was going for.&lt;/p&gt;
&lt;p&gt;&lt;img alt="First attempt" src="5.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;But I had enough fabric on hand to do it again, this time with some fixes. The head seams on the old bag were not great and showed the raw edge of the fabric. I added in a liner, adjusted the zipper size and position, and found a better way to attach the straps that didn&amp;rsquo;t dig into my skin; I guess it was a happy accident?&lt;/p&gt;
&lt;p&gt;Just look at the difference:&lt;/p&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="Old head" src="8.jpeg" /&gt;
        &lt;img alt="New head" src="7.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;Another upside, I now have two of these bags! Meaning I had a test subject for waxing the bag to make it waterproof. Eventually I would like to make a frame bag for my bike with what I&amp;rsquo;ve learned from this project.&lt;/p&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="Side by side of old and new" src="6.jpeg" /&gt;
        &lt;img alt="Waxing the old" src="12.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/sewing/fish-bag/index.html" />
  </entry>
  <entry>
    <title>Stained Glass Lamp</title>
    <id>furniture/lighting/stained-glass/index.html</id>
    <updated>2025-05-09T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Lamp" src="1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;I was a bit ambitious on this project, turns out stained-glass is incredibly hard to do. In my naivety I thought it would be as simple as &amp;ldquo;cut the shapes and piece them together&amp;rdquo;. Cutting accurately: hard. Soldering cleanly: harder. Soldering in 3D: impossibly difficult. But I finished it (or close enough at any rate). &lt;/p&gt;
&lt;p&gt;This lamp was greatly inspired by the work of &lt;a href="http://www.shawnmlucas.com"&gt;Shawn Michael Lucas&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-process"&gt;The Process&lt;a class="headerlink" href="#the-process" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="Alt view 1" src="2.jpeg" /&gt;
        &lt;img alt="Alt view 2" src="3.jpeg" /&gt;
        &lt;img alt="Alt view 3" src="4.jpeg" /&gt;
        &lt;img alt="Alt view 4" src="5.jpeg" /&gt;
        &lt;img alt="Alt view 5" src="6.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;h2 id="complete"&gt;Complete&lt;a class="headerlink" href="#complete" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="Completed view 1" src="7.jpeg" /&gt;
        &lt;img alt="Completed view 2" src="8.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/furniture/lighting/stained-glass/index.html" />
  </entry>
  <entry>
    <title>Shoreland Lane</title>
    <id>paintings/shoreland/index.html</id>
    <updated>2025-01-26T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Shoreland Lane" src="shoreland.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;The snow at my parents&amp;rsquo; place &lt;code&gt;4.5" x 6"&lt;/code&gt;, oil on canvas paper.&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/shoreland/index.html" />
  </entry>
  <entry>
    <title>Chongqing Chicken (Laziji)</title>
    <id>recipes/chongqing_chicken.html</id>
    <updated>2025-01-26T00:00:00Z</updated>
    <content type="html">&lt;h1 id="ingredients"&gt;Ingredients&lt;a class="headerlink" href="#ingredients" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1 chicken breast&lt;/li&gt;
&lt;li&gt;Dark soy sauce&lt;/li&gt;
&lt;li&gt;Rice vinegar&lt;/li&gt;
&lt;li&gt;Pepper&lt;/li&gt;
&lt;li&gt;Cornstarch&lt;/li&gt;
&lt;li&gt;Cooking oil&lt;/li&gt;
&lt;li&gt;12 dried chilis&lt;/li&gt;
&lt;li&gt;6 cloves of garlic&lt;/li&gt;
&lt;li&gt;1 1/2 tablespoons minced ginger&lt;/li&gt;
&lt;li&gt;1/2 tablespoon szechuan peppercorns&lt;/li&gt;
&lt;li&gt;5 green onions&lt;/li&gt;
&lt;li&gt;1 tbsp Lao Gan Ma &lt;em&gt;Fried Chili in Oil&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="instructions"&gt;Instructions&lt;a class="headerlink" href="#instructions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cut the chicken breast to 1/2 inch cubes&lt;/li&gt;
&lt;li&gt;Marinate chicken in soy sauce, vinegar, and pepper for an hour&lt;/li&gt;
&lt;li&gt;Drain marinade, coat chicken in cornstarch and spray with cooking oil&lt;/li&gt;
&lt;li&gt;Air fry chicken for 20-40 minutes until crispy. Turning and coating with oil when appropriate&lt;/li&gt;
&lt;li&gt;Thinly slice garlic and green onions. Coarsely chop chilis. Crush szechuan peppercorns&lt;/li&gt;
&lt;li&gt;Stir-fry garlic and ginger in Lao Gan Ma and some oil until fragrant&lt;/li&gt;
&lt;li&gt;Add cooked chicken and green onions, cooking for 5 minutes more&lt;/li&gt;
&lt;li&gt;Serve over rice&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="substitutions"&gt;Substitutions&lt;a class="headerlink" href="#substitutions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Use pre-made popcorn chicken to avoid having to prepare and fry your own. I add some soy sauce while stir-frying to help moisten things a bit&lt;/li&gt;
&lt;li&gt;Also tastes good with &lt;a href="pork_chashu.html"&gt;chashu pork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/recipes/chongqing_chicken.html" />
  </entry>
  <entry>
    <title>Pasta al Limone</title>
    <id>recipes/pasta_al_limone.html</id>
    <updated>2025-01-26T00:00:00Z</updated>
    <content type="html">&lt;h1 id="ingredients"&gt;Ingredients&lt;a class="headerlink" href="#ingredients" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;3/4 cup heavy cream&lt;/li&gt;
&lt;li&gt;1/4 cup (4 tablespoons) cold butter, cubed&lt;/li&gt;
&lt;li&gt;1/2 cup grated parmesan&lt;/li&gt;
&lt;li&gt;12 oz pasta&lt;/li&gt;
&lt;li&gt;1 lemon&lt;/li&gt;
&lt;li&gt;Salt&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="instructions"&gt;Instructions&lt;a class="headerlink" href="#instructions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Prepare the pasta to your liking in salted water&lt;/li&gt;
&lt;li&gt;Heat up the heavy cream, do not let boil at any point&lt;/li&gt;
&lt;li&gt;Add lemon zest to cream&lt;/li&gt;
&lt;li&gt;Slowly whisk in butter, I usually make the cubes 1/2-1 tablespoon in size&lt;/li&gt;
&lt;li&gt;Add parmesan and incorporate&lt;/li&gt;
&lt;li&gt;Add juice from the lemon&lt;/li&gt;
&lt;li&gt;Salt to taste&lt;/li&gt;
&lt;li&gt;Serve sauce over prepared pasta&lt;/li&gt;
&lt;/ul&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/recipes/pasta_al_limone.html" />
  </entry>
  <entry>
    <title>Hummus</title>
    <id>recipes/hummus.html</id>
    <updated>2025-01-26T00:00:00Z</updated>
    <content type="html">&lt;h1 id="ingredients"&gt;Ingredients&lt;a class="headerlink" href="#ingredients" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1/4 cup tahini&lt;/li&gt;
&lt;li&gt;1/4 cup lemon juice&lt;/li&gt;
&lt;li&gt;2 tablespoon olive oil&lt;/li&gt;
&lt;li&gt;1 clove garlic&lt;/li&gt;
&lt;li&gt;1/2 teaspoon ground cumin&lt;/li&gt;
&lt;li&gt;Salt to taste&lt;/li&gt;
&lt;li&gt;Any other spices (eg paprika and sumac)&lt;/li&gt;
&lt;li&gt;1 15oz can chickpeas&lt;/li&gt;
&lt;li&gt;Water&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="instructions"&gt;Instructions&lt;a class="headerlink" href="#instructions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cream tahini and lemon juice&lt;/li&gt;
&lt;li&gt;Add olive oil, garlic, spices&lt;/li&gt;
&lt;li&gt;Add half of the chickpeas, blend to break them down&lt;/li&gt;
&lt;li&gt;Add rest of chickpeas, blend until smooth adding water or lemon juice to get desired consistency and taste&lt;/li&gt;
&lt;li&gt;Check salt&lt;/li&gt;
&lt;/ul&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/recipes/hummus.html" />
  </entry>
  <entry>
    <title>Nonograms</title>
    <id>programming/nonogram/index.html</id>
    <updated>2025-01-26T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;link rel="stylesheet" href="./nonogram.css"&gt;&lt;/p&gt;
&lt;p&gt;I started writing this months ago, with an ambition to generate uniquely solvable nonogram puzzles. Although I have yet to do this, I&amp;rsquo;ve found in practice that randomly generated ones at the board size I like to play with are generally easy enough to determine if I&amp;rsquo;ll be able to solve it or not. &lt;/p&gt;
&lt;p&gt;This post documents some of the things I&amp;rsquo;ve explored and may be expanded on in the future. But for now it is something that has been sitting un-published for too long.&lt;/p&gt;
&lt;p&gt;&lt;a href="../../static/nonogram"&gt;Play the game here&lt;/a&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fun-and-games"&gt;Fun and Games&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-game"&gt;The Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-question-of-uniqueness"&gt;The Question of Uniqueness&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#patterns-that-lead-to-multiple-solutions"&gt;Patterns that lead to multiple solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combinations"&gt;Combinations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-avoid-non-unique-puzzles"&gt;How to avoid non-unique puzzles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#solvability-with-lacking-information"&gt;Solvability with lacking information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#implementing"&gt;Implementing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-game_1"&gt;The Game&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#board-generation"&gt;Board Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clue-calculation"&gt;Clue Calculation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#future-topics"&gt;Future Topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references-and-notes"&gt;References and Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="fun-and-games"&gt;Fun and Games&lt;a class="headerlink" href="#fun-and-games" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Nonograms are a type of logic puzzle wherein the player is presented with a grid and a series of clues for each column and row. Using these clues, the player marks certain cells in the grid in one of three states: filled, empty, and unknown.&lt;/p&gt;
&lt;h2 id="the-game"&gt;The Game&lt;a class="headerlink" href="#the-game" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each column and row has a clue, which is an ordered list of integers. These integers indicate consecutive groups of filled cells, each group separated by one or more empty cells. &lt;/p&gt;
&lt;p&gt;For example, consider a 6-cell wide row with hint &lt;code&gt;1,3&lt;/code&gt;. There are 3 possible solutions&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1, 3  &amp;#9726; &amp;#9725; &amp;#9726; &amp;#9726; &amp;#9726; &amp;#9725;&lt;/p&gt;
&lt;p&gt;1, 3  &amp;#9726; &amp;#9725; &amp;#9725; &amp;#9726; &amp;#9726; &amp;#9726;&lt;/p&gt;
&lt;p&gt;1, 3  &amp;#9725; &amp;#9726; &amp;#9725; &amp;#9726; &amp;#9726; &amp;#9726;&lt;/p&gt;
&lt;p&gt;Key:
unknown &amp;#9974;
filled &amp;#9726;
empty &amp;#9725;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Players can deduce that the following filled squares will always be filled with hint &lt;code&gt;1,3&lt;/code&gt; in a 6-cell row (or column)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1, 3  &amp;#9974; &amp;#9974; &amp;#9974; &amp;#9726; &amp;#9726; &amp;#9974;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(If you think of each row as a 6-bit number with filled as 1 and empty as 0, this is the bitwise &lt;code&gt;AND&lt;/code&gt; of all possible solutions)&lt;/p&gt;
&lt;p&gt;The player can then look at the other rows and columns, determine which cells need to be filled, and work their way iteratively through the board, revisiting columns and rows after more information has been gained from an intersecting row or column. &lt;/p&gt;
&lt;p&gt;Following these rules, the player fills in a game board until complete.&lt;/p&gt;
&lt;figure class="figure"&gt;

&lt;img alt="Solved example" src="ex1.png" /&gt;

&lt;figcaption&gt;A solved nonogram with clues&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This method of solving doesn&amp;rsquo;t always work, however. Occasionally there is not enough information to consider single rows and columns, but instead you need to consider a combination of them.&lt;/p&gt;
&lt;p&gt;The simplest example of one such technique is what Battenburg calls &lt;span class="arithmatex"&gt;\((2,2)\)&lt;/span&gt; solvable, a specific instance of &lt;span class="arithmatex"&gt;\((p,q)\)&lt;/span&gt;-solvability &lt;sup id="fnref:Batenburg2012"&gt;&lt;a class="footnote-ref" href="#fn:Batenburg2012"&gt;1&lt;/a&gt;&lt;/sup&gt;. For a #m\times n$ nonogram and for &lt;span class="arithmatex"&gt;\(1\leq p \leq m\)&lt;/span&gt;, &lt;span class="arithmatex"&gt;\(1\leq q \leq n\)&lt;/span&gt;, the puzzle is &lt;span class="arithmatex"&gt;\((p,q)\)&lt;/span&gt; solvable if it can be solved by using alternating row and column inferences, and then consider all &lt;span class="arithmatex"&gt;\(p\)&lt;/span&gt; rows and &lt;span class="arithmatex"&gt;\(q\)&lt;/span&gt; columns and finding where the intersection of such have cells that guaranteed to be filled in any configuration. &lt;span class="arithmatex"&gt;\((2,2)\)&lt;/span&gt; solving, then, involves looking at the intersection of 2 rows and 2 columns and finding any fixed cells in those instances. &lt;/p&gt;
&lt;h2 id="the-question-of-uniqueness"&gt;The Question of Uniqueness&lt;a class="headerlink" href="#the-question-of-uniqueness" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As it turns out, the game can be a bit more complicated than that. For starters, a set of hints is not guaranteed to be uniquely solvable! This becomes a problem when trying to generate puzzles, as having multiple solutions can make it significantly more difficult to solve. &lt;/p&gt;
&lt;h3 id="patterns-that-lead-to-multiple-solutions"&gt;Patterns that lead to multiple solutions&lt;a class="headerlink" href="#patterns-that-lead-to-multiple-solutions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Classifying the types of patterns that result in multiple solutions isn&amp;rsquo;t immediately obvious (to me at least).&lt;/p&gt;
&lt;p&gt;Some key properties that may help give some better understanding on the problem could be: proximity, cardinality, or parity.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution A&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution B&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For example, in the figure above, two solutions arise just by flipping the bits of a &lt;code&gt;2x2&lt;/code&gt; square. Should this be classified as a &amp;ldquo;close&amp;rdquo; pattern? Cardinal 2 because it produces two solutions? &amp;ldquo;Even&amp;rdquo; parity because it involves two cells? This type of pattern is explored by Valve&lt;sup id="fnref:Valve"&gt;&lt;a class="footnote-ref" href="#fn:Valve"&gt;5&lt;/a&gt;&lt;/sup&gt;, where he named it a &amp;ldquo;switching component&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Another example&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution A&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution B&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution C&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Three solutions. The filled cells are all separated by some number of empty cells, should this be classified as &amp;ldquo;far&amp;rdquo;? Cardinal 3? &amp;ldquo;Odd&amp;rdquo; parity? Is this pattern a combination of three of the first type?&lt;/p&gt;
&lt;p&gt;Ultimately classifying these types of patterns is really only useful if we can get additional information out of them. And for that matter, what really is useful? From personal experience, the first example is incredibly easy to solve in practice. The implications are clear and often when it arises in a larger problem it is has little effect on the rest of the solution &amp;ndash; you just pick one option and continue solving everything else.&lt;/p&gt;
&lt;h3 id="combinations"&gt;Combinations&lt;a class="headerlink" href="#combinations" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to a single clue configuration resulting in multiple solutions, these ambiguous patterns can be combined in a single board to create a game with many solutions.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&amp;hellip;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution A&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="figure"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;&amp;hellip;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;(&amp;#9974;)&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Solution B&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &amp;ldquo;&amp;hellip;&amp;rdquo; can be any other puzzle, and the configuration on the outer-edge will necessarily double the number of possible solutions from the puzzle defined just by &amp;ldquo;&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;These &amp;ldquo;embeddings&amp;rdquo; of patterns aren&amp;rsquo;t limited to edges, however. Consider the following:&lt;/p&gt;
&lt;figure class="figure" id="combined_puzzle_1"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,1,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1,1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Figure A&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Each blue marked box is itself of the &lt;code&gt;2x2&lt;/code&gt; pattern. There are 4 solutions possible just by virtue of these yellow boxes alone.&lt;/p&gt;
&lt;p&gt;But there is compounding ambiguity, as several of these highlighted cells are actually part of other ambiguous patterns.&lt;/p&gt;
&lt;figure class="figure" id="combined_puzzle_2"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,1,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1,1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Figure B&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="figure" id="combined_puzzle_3"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;1&lt;br/&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1,1,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1,1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2,1&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9726;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;td&gt;&amp;#9725;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;Figure C&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These ambiguities make some of these puzzles particularly hard to solve, somtimes impossibly so through inference alone, requiring the solver to make guesses and verify later if it was a correct decision.&lt;/p&gt;
&lt;h3 id="how-to-avoid-non-unique-puzzles"&gt;How to avoid non-unique puzzles&lt;a class="headerlink" href="#how-to-avoid-non-unique-puzzles" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generating puzzles is easy, just make an &lt;code&gt;nxm&lt;/code&gt; bit map and calculate the clues. Both have time complexity &lt;span class="arithmatex"&gt;\(\mathcal{O}(nm)\)&lt;/span&gt; see &lt;a href="#board-generation"&gt;board generation&lt;/a&gt; and &lt;a href="#clue-calculation"&gt;clue calculation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The much harder problem is determining if that set of clues has a unique solution. Turns out this is NP-Complete&lt;sup id="fnref:Ueda"&gt;&lt;a class="footnote-ref" href="#fn:Ueda"&gt;2&lt;/a&gt;&lt;/sup&gt;. Ueda shows that  &lt;em&gt;Another Solution Problem (ASP)&lt;/em&gt; for nonograms is reducible to the &lt;em&gt;3D Matching&lt;/em&gt; problem. &lt;em&gt;ASP-Nonogram&lt;/em&gt; is formulated as: &lt;em&gt;given a set of clues and a solution &lt;span class="arithmatex"&gt;\(P\)&lt;/span&gt;, does there exist another solution &lt;span class="arithmatex"&gt;\(P'\neq P\)&lt;/span&gt; satisfying the same clues?&lt;/em&gt; This is exactly the situation we have after generating a board.&lt;/p&gt;
&lt;p&gt;For small enough boards you can just enumerate the entire space of nonograms (the bitmaps) and calculate their associated clues. If you group all of these nonograms by matching sets of clues, then each group is the solution space for those clues. Groups of cardinality 1 have a single solution to a set of clues and can be classified as &amp;ldquo;solvable&amp;rdquo;. Groups with more than a single solution then must have some ambiguity in the clues.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nonogram&lt;/th&gt;
&lt;th&gt;# Boards&lt;/th&gt;
&lt;th&gt;# Unique clues&lt;/th&gt;
&lt;th&gt;# Non-unique clues&lt;/th&gt;
&lt;th&gt;% Non-unique&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2x2&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;6.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2x3&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;9.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3x3&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;445&lt;/td&gt;
&lt;td&gt;67&lt;/td&gt;
&lt;td&gt;13.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3x4&lt;/td&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;td&gt;3588&lt;/td&gt;
&lt;td&gt;508&lt;/td&gt;
&lt;td&gt;12.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4x4&lt;/td&gt;
&lt;td&gt;65536&lt;/td&gt;
&lt;td&gt;58196&lt;/td&gt;
&lt;td&gt;7340&lt;/td&gt;
&lt;td&gt;11.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This quickly becomes intractable, the number of boards increases exponentially with the size of the puzzle, specifically there are &lt;span class="arithmatex"&gt;\(2^{nm}\)&lt;/span&gt; boards for an &lt;span class="arithmatex"&gt;\(n\times m\)&lt;/span&gt; puzzle. &lt;/p&gt;
&lt;h2 id="solvability-with-lacking-information"&gt;Solvability with lacking information&lt;a class="headerlink" href="#solvability-with-lacking-information" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Solving some puzzles is easy. Each clue might have some set of cells that are guaranteed to be filled in the solved state. Filling in a cell for one clue might give more information for another clue (ie the intersecting, perpendicular clue)&amp;mdash;if the solver iterates over the clues repeatedly they may gain enough information in each pass to eventually solve the puzzle in its entirety.&lt;/p&gt;
&lt;p&gt;Sometimes this inferential solving technique is not enough to deterministically solve the puzzle. What can they do from this point?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;I&amp;rsquo;ll leave these questions for another post&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(How) can you confirm guesses by filling in the board after making an assumption?&lt;/li&gt;
&lt;li&gt;Is a puzzle acceptable if it has only one instance where you need to guess&lt;/li&gt;
&lt;li&gt;Are there single-solution problems that cannot be solved inferentially (ie need to guess at some point)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="implementing"&gt;Implementing&lt;a class="headerlink" href="#implementing" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="the-game_1"&gt;The Game&lt;a class="headerlink" href="#the-game_1" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="board-generation"&gt;Board Generation&lt;a class="headerlink" href="#board-generation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given an &lt;code&gt;nxm&lt;/code&gt; puzzle, generate a board. In this case, the code simply creates a &lt;code&gt;nxm&lt;/code&gt; bitmap, with &lt;code&gt;0&lt;/code&gt; for an empty cell and &lt;code&gt;1&lt;/code&gt; for filled.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;array2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;randomBit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3 id="clue-calculation"&gt;Clue Calculation&lt;a class="headerlink" href="#clue-calculation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Given an &lt;code&gt;nxm&lt;/code&gt; board (bitmap), calculate the set of clues&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcRowHints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max_hints&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r_h&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r_h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r_h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r_h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;max_hints&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_hints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;r_h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;hint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_hints&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;hint&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;row_clues&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcRowHints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;column_clues&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;calcRowHints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matrixTranspose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To find the clue for a given row of digits you iterate over it until you reach the first filled one. Count how many appear contiguously until you reach an empty digit or the end. Add this count to a running array of counts, reset the count to zero and repeat until you reach the end of the row.&lt;/p&gt;
&lt;p&gt;A set of clues for the rows is then just running over the entire image, and for columns it is doing the same but on the transpose of the image.&lt;/p&gt;
&lt;h1 id="future-topics"&gt;Future Topics&lt;a class="headerlink" href="#future-topics" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There is a lot to explore in this space. &lt;/p&gt;
&lt;p&gt;There still might be some heuristic for generating uniquely solvable puzzles that isn&amp;rsquo;t np-complete, some ideas are explored by Henrick Valve&lt;sup id="fnref2:Valve"&gt;&lt;a class="footnote-ref" href="#fn:Valve"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve completely avoided the topic of actually &lt;em&gt;solving&lt;/em&gt; these puzzles in any kind of algorithmic way&amp;mdash;there is already pretty extensive literature on this.&lt;sup id="fnref:Batenburg2008"&gt;&lt;a class="footnote-ref" href="#fn:Batenburg2008"&gt;3&lt;/a&gt;&lt;/sup&gt;,&lt;sup id="fnref:Oosterman"&gt;&lt;a class="footnote-ref" href="#fn:Oosterman"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Finding a better representation for these problems may aid in analysis. Particularly finding a group representation for both the boards and the clues where the map of boards -&amp;gt; clues can be studied more rigorously.&lt;/p&gt;
&lt;h1 id="references-and-notes"&gt;References and Notes&lt;a class="headerlink" href="#references-and-notes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:Batenburg2012"&gt;
&lt;p&gt;K. Joost Batenburg and Walter A. Kosters. December 2012. On the Difficulty of Nonograms. &lt;a href="https://liacs.leidenuniv.nl/~kosterswa/nonodec2012.pdf"&gt;PDF&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:Batenburg2012" title="Jump back to footnote 1 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Ueda"&gt;
&lt;p&gt;Nobuhisa Ueda and Tadaaki Nagao. May 1996. NP-Completeness Results for NONOGRAM via Parsimonious Reductions. &lt;a href="https://citeseerx.ist.psu.edu/document?repid=rep1&amp;amp;type=pdf&amp;amp;doi=1bb23460c7f0462d95832bb876ec2ee0e5bc46cf"&gt;PDF&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:Ueda" title="Jump back to footnote 2 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Batenburg2008"&gt;
&lt;p&gt;K. Joost Batenburg and Walter A. Kosters. November 2008. Solving Nonograms by combining relaxations. &lt;a href="https://homepages.cwi.nl/~kbatenbu/papers/bako_pr_2009.pdf"&gt;PDF&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:Batenburg2008" title="Jump back to footnote 3 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Oosterman"&gt;
&lt;p&gt;R.A. Oosterman. April 2017. Complexity and solvability of Nonogram puzzles. &lt;a href="https://fse.studenttheses.ub.rug.nl/15287/1/Master_Educatie_2017_RAOosterman.pdf"&gt;PDF&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:Oosterman" title="Jump back to footnote 4 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:Valve"&gt;
&lt;p&gt;Henrik Valve. 2022. On the estimation of the number of solutions for nonograms. &lt;a href="https://lutpub.lut.fi/bitstream/handle/10024/166259/diplomityo_henrik_valve.pdf?sequence=3&amp;amp;isAllowed=y"&gt;PDF&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:Valve" title="Jump back to footnote 5 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:Valve" title="Jump back to footnote 5 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/programming/nonogram/index.html" />
  </entry>
  <entry>
    <title>Mittens</title>
    <id>knitting/mittens/index.html</id>
    <updated>2025-01-18T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Finished" src="done.jpeg" /&gt;&lt;/p&gt;
&lt;h1 id="project-details"&gt;Project Details&lt;a class="headerlink" href="#project-details" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="pattern"&gt;Pattern&lt;a class="headerlink" href="#pattern" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ravel.me/basic-cabled-mittens"&gt;Basic Cabled Mittens&lt;/a&gt; by Amy O&amp;rsquo;Dell.&lt;/p&gt;
&lt;h2 id="yarn"&gt;Yarn&lt;a class="headerlink" href="#yarn" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eleven Gates (100% wool)&lt;/p&gt;
&lt;p&gt;This wool came from the farm my aunt and uncle live on and was gifted to me for Christmas. It is very soft and was perfect for this project.&lt;/p&gt;
&lt;h2 id="needles"&gt;Needles&lt;a class="headerlink" href="#needles" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;US 6 (4mm) dual-pointed needles&lt;/p&gt;
&lt;p&gt;The pattern called for doing magic loop on circular needles, but I hate magic loop.&lt;/p&gt;
&lt;h1 id="progress"&gt;Progress&lt;a class="headerlink" href="#progress" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Start" src="1.jpeg" /&gt;
First step, winding a ball from the skein at my favorite coffe shop/bookstore&lt;/p&gt;
&lt;p&gt;&lt;img alt="First fit check" src="2.jpeg" /&gt;
Angsty emo Avril Lavigne sk8r boi gloves. Checking the thumb placement and reach of the cuff to make sure everything was good there before finishing through the end of my fingers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Starting the second" src="3.jpeg" /&gt;
Back at the coffee shop, a girl scout was making bank selling cookies at dinner time. I think everyone bought at least one box, and a lady even bought one of each.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Finished but yet to be blocked" src="4.jpeg" /&gt;
Before blocking the mittens&lt;/p&gt;
&lt;p&gt;&lt;img alt="Blocked" src="5.jpeg" /&gt;
Slightly more mitten shaped&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/knitting/mittens/index.html" />
  </entry>
  <entry>
    <title>Telephone Poles</title>
    <id>paintings/telephone_poles/index.html</id>
    <updated>2024-11-01T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Telephone Poles" src="telephone_poles.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Small sketch of telephone poles back home &lt;code&gt;4.5" x 6"&lt;/code&gt;, oil on canvas paper.&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/telephone_poles/index.html" />
  </entry>
  <entry>
    <title>Holy Hill</title>
    <id>paintings/holy_hill/index.html</id>
    <updated>2024-11-01T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Holy Hill" src="holy_hill.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Small sketch of the basilica on Holy Hill in Hubertus Wisconsin &lt;code&gt;4" x 6"&lt;/code&gt;, oil on canvas paper.&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/holy_hill/index.html" />
  </entry>
  <entry>
    <title>Mid Illinois</title>
    <id>paintings/mid_illinois/index.html</id>
    <updated>2024-10-28T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Mid Illinois" src="mid_illinois.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Small sketch of a farm somewhere in Illinois, driving back from a funeral &lt;code&gt;4.5" x 6"&lt;/code&gt;, oil on canvas paper.&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/mid_illinois/index.html" />
  </entry>
  <entry>
    <title>Lake Michigan from Chicago</title>
    <id>paintings/lake_michigan_chicago/index.html</id>
    <updated>2024-08-22T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Lake Michigan from Chicago" src="lake_michigan.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;11"x14"&lt;/code&gt; oil on hardboard&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/lake_michigan_chicago/index.html" />
  </entry>
  <entry>
    <title>Slow Thaw</title>
    <id>paintings/slow_thaw/index.html</id>
    <updated>2024-08-04T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Slow Thaw" src="slow_thaw_ben_bauer.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;11"x14"&lt;/code&gt; oil on canvas board&lt;/p&gt;
&lt;p&gt;Copy of Slow Thaw by Ben Bauer.&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/slow_thaw/index.html" />
  </entry>
  <entry>
    <title>Chandelier</title>
    <id>furniture/lighting/chandelier/index.html</id>
    <updated>2024-04-27T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Chandelier" src="1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Originally this fixture was made to provide better lighting in the bathroom of my old place. It now serves as the chandelier over my kitchen table.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Raw materials" src="making_1.jpeg" /&gt;
The construction is pretty simple. It is made from sections of aluminum flashing that have been spray-painted and then fastened together with some machine screws to form circles. The screws work as hooks to hold each section of the shade with twine that is threaded through a board on top&lt;/p&gt;
&lt;p&gt;&lt;img alt="Unfinished" src="making_2.jpeg" /&gt;
The board has a holes for the twine to pass through as well as a larger one for a pendant light. The twine is tied around the cord of the pendant fixture to hold the shades level at and at the appropriate heights.&lt;/p&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="Alt view 1" src="2.jpeg" /&gt;
        &lt;img alt="Alt view 2" src="3.jpeg" /&gt;
        &lt;img alt="Alt view 3" src="4.jpeg" /&gt;
        &lt;img alt="Alt view 4" src="5.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/furniture/lighting/chandelier/index.html" />
  </entry>
  <entry>
    <title>Sketches</title>
    <id>paintings/sketches/index.html</id>
    <updated>2024-03-25T00:00:00Z</updated>
    <content type="html">&lt;p&gt;A series of small sketches &lt;code&gt;4" x 4.5"&lt;/code&gt;, oil on canvas paper.&lt;/p&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;

&lt;img alt="Sketch 0" src="sketch0.jpeg" /&gt;
&lt;img alt="Sketch 1" src="sketch1.jpeg" /&gt;
&lt;img alt="Sketch 2" src="sketch2.jpeg" /&gt;
&lt;img alt="Home" src="sketch3.jpeg" title="Home" /&gt;
&lt;img alt="Sketch 4" src="sketch4.jpeg" /&gt;
&lt;img alt="Ghost of a plant killed by the winter storm" src="sketch5.jpeg" title="Ghost of a plant killed by the winter storm" /&gt;
&lt;img alt="Hell on earth" src="sketch6.jpeg" title="Hell on Earth" /&gt;
&lt;img alt="Abandoned farm ruins" src="sketch7.jpeg" title="Abandoned farm ruins" /&gt;
&lt;img alt="Chicago" src="sketch8.jpeg" title="Chicago" /&gt;

&lt;/div&gt;
&lt;/section&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/sketches/index.html" />
  </entry>
  <entry>
    <title>Knitting Tools</title>
    <id>programming/knitting/index.html</id>
    <updated>2024-02-26T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;link rel="stylesheet" href="./knitting.css"&gt;&lt;/p&gt;
&lt;h1 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This project began from the want to test knitting patterns before going through the labor of knitting it up physically. I had been drafting a cable-knit pattern for a long time, and each iteration meant a lot of wasted time plotting out cables and knitting a test piece. Naturally it got me thinking: can I do this with software?&lt;/p&gt;
&lt;p&gt;There are three main components to the suite of tools that came from this idea: the parser generator, the knitting pattern api, and visualization. The three in tandem allow a user to parse a knitting pattern, translate it into a data structure, and then estimate the physical form of the finished object in 3d space.&lt;/p&gt;
&lt;figure class="figure"&gt;

&lt;img alt="duckbrella" src="duckbrella.jpeg" /&gt;
&lt;img alt="plot of hat" src="mds-metric-init.jpeg" /&gt;
&lt;figcaption&gt;A knitted hat for the duckbrella and its estimated visualization
&lt;br/&gt;

&lt;code&gt;co20 (k20)10 (k2tog k5)18&lt;/code&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Find the code on &lt;a href="https://github.com/ryanramsdell27/knitting"&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defining-a-formal-language-concepts-of-knitting"&gt;Defining a formal language: concepts of knitting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#casting-on"&gt;Casting on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#knitting"&gt;Knitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#purling"&gt;Purling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decreases"&gt;Decreases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#increases"&gt;Increases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repeats"&gt;Repeats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#javacc-parser-generator"&gt;JavaCC: parser generator&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#jjtree"&gt;JJTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tooling"&gt;Tooling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#grammar-specification"&gt;Grammar specification&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tokens"&gt;Tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#expressionsproductions"&gt;Expressions/productions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#interpreting-a-tree"&gt;Interpreting a tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-knitting-api"&gt;A knitting API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visualization"&gt;Visualization&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#naive-approach"&gt;Na&#239;ve approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multidimensional-scaling"&gt;Multidimensional scaling&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-should-this-work"&gt;Why should this work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#constructing-a-distance-matrix"&gt;Constructing a distance matrix&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#depth-limited-bfs"&gt;Depth limited BFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#floyd-warshall4"&gt;Floyd-Warshall4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repeated-dijkstras"&gt;Repeated Dijkstra&amp;rsquo;s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#johnsons-algorithm8"&gt;Johnson&amp;rsquo;s algorithm8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#performing-mds"&gt;Performing MDS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#metric-vs-non-metric"&gt;Metric vs non-metric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#computational-limitations"&gt;Computational limitations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references-and-notes"&gt;References and Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h1 id="defining-a-formal-language-concepts-of-knitting"&gt;Defining a formal language: concepts of knitting&lt;a class="headerlink" href="#defining-a-formal-language-concepts-of-knitting" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;What&amp;rsquo;s a knitting pattern other than a program you can execute on knitting needles? No pattern writer follows an exact set of rules when writing out a pattern, but there are a number of widely adopted norms that make defining a formal knitting language easy.&lt;/p&gt;
&lt;h2 id="casting-on"&gt;Casting on&lt;a class="headerlink" href="#casting-on" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first step when knitting is always to cast on stitches &amp;ndash; this places new live stitches on the needle that can be knit from later.&lt;/p&gt;
&lt;p&gt;Generally this is represented in a pattern as some variation of &lt;code&gt;cast on X&lt;/code&gt; or &lt;code&gt;coX&lt;/code&gt; for &lt;code&gt;X&lt;/code&gt; number of stitches.&lt;/p&gt;
&lt;h2 id="knitting"&gt;Knitting&lt;a class="headerlink" href="#knitting" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The knit stitch is the most basic knitting operation. It creates a new loop on top of the next live stitch.&lt;/p&gt;
&lt;p&gt;This is denoted with &lt;code&gt;knit&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt; for singular operations, or &lt;code&gt;knit X&lt;/code&gt; or &lt;code&gt;kX&lt;/code&gt; for doing &lt;code&gt;X&lt;/code&gt; number of stitches.&lt;/p&gt;
&lt;h2 id="purling"&gt;Purling&lt;a class="headerlink" href="#purling" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Purling is the reverse of a knit stitch.&lt;/p&gt;
&lt;p&gt;This is denoted with &lt;code&gt;purl&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; for singular operations, or &lt;code&gt;purl X&lt;/code&gt; or &lt;code&gt;pX&lt;/code&gt; for doing &lt;code&gt;X&lt;/code&gt; number of stitches.&lt;/p&gt;
&lt;h2 id="decreases"&gt;Decreases&lt;a class="headerlink" href="#decreases" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Decreases are a way of reducing the total number of live stitches on the needles. There are several ways of doing a decrease, including slipping stitches over others, and knitting or purling stitches together. For now, I consider just two forms: knitting or purling some number X of stitches together. This operation builds the new stitch with the next X live stitches as its parents.&lt;/p&gt;
&lt;p&gt;These decreases are expressed as &lt;code&gt;knitXtog&lt;/code&gt; or &lt;code&gt;kXtog&lt;/code&gt; for knitting &lt;code&gt;X&lt;/code&gt; live stitches together, or analogously &lt;code&gt;purlXtog&lt;/code&gt; and &lt;code&gt;pXtog&lt;/code&gt; for purling.&lt;/p&gt;
&lt;h2 id="increases"&gt;Increases&lt;a class="headerlink" href="#increases" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Increases are the opposite of decreases, and add additional live stitches onto the needles. For the purpose of this program, increases will be interpreted as &amp;ldquo;makes&amp;rdquo;, which take a single live stitch and builds two children stitches with the single shared parent. These increases can be done as knits (default) or &amp;ldquo;purlwise&amp;rdquo;, and also can be done to have a left or right lean to them.&lt;/p&gt;
&lt;p&gt;Increases can be given as &lt;code&gt;make X&lt;/code&gt; or &lt;code&gt;mX&lt;/code&gt; for adding &lt;code&gt;X&lt;/code&gt; stitches. Adding in the optional specifiers, we should also aim to capture &lt;code&gt;make X purlwise left&lt;/code&gt; or &lt;code&gt;mXpl&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="repeats"&gt;Repeats&lt;a class="headerlink" href="#repeats" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A key structural tool in knitting patterns is the concept of the repeat, which tells the knitter to do some combination of stitches multiple times. This is already seen in the &lt;a href="#knitting"&gt;knit&lt;/a&gt; and &lt;a href="#purling"&gt;purl&lt;/a&gt; productions, like the construction &lt;code&gt;k5&lt;/code&gt;, but can be generalized to a combination of expressions, i.e. doing the sequence &lt;code&gt;knit 5 purl 4 k2tog&lt;/code&gt; 5 times.&lt;/p&gt;
&lt;p&gt;To represent repeats for an expression, I&amp;rsquo;ve adopted the notation &lt;code&gt;(&amp;lt;EXP&amp;gt;)X&lt;/code&gt; where &lt;code&gt;&amp;lt;EXP&amp;gt;&lt;/code&gt; is any valid sequence of operations, including other repeats, that will be done in sequence &lt;code&gt;X&lt;/code&gt; number of times. For example, &lt;code&gt;((purl 2)4 knit 2)5&lt;/code&gt; will result in 50 stitches.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="javacc-parser-generator"&gt;JavaCC: parser generator&lt;a class="headerlink" href="#javacc-parser-generator" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Parsing a pattern isn&amp;rsquo;t a trivial exercise, especially with looping and nesting constructs. To simplify this process, I&amp;rsquo;ve made use of JavaCC&lt;sup id="fnref:javacc"&gt;&lt;a class="footnote-ref" href="#fn:javacc"&gt;1&lt;/a&gt;&lt;/sup&gt; (Java compiler compiler). By equipping this parser-generator with a grammar specification, it produces java code capable of interpreting/matching input (in this case a knitting pattern) to that grammar.&lt;/p&gt;
&lt;h2 id="jjtree"&gt;JJTree&lt;a class="headerlink" href="#jjtree" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to the parser generator, JavaCC includes JJTree which produces a tree representation of the input sent to the parser. JJTree specific metadata can be included in the grammar specification used by JavaCC through the definition of Abstract Syntax Tree (AST) nodes. &lt;/p&gt;
&lt;p&gt;When the generated parser produces a tree, it maps a matched production (like &lt;code&gt;knit 8&lt;/code&gt; or &lt;code&gt;(p3 k4)6&lt;/code&gt;) to a well-defined object (AST class), with information that can be used in interpreting the tree&lt;sup id="fnref:nmsu"&gt;&lt;a class="footnote-ref" href="#fn:nmsu"&gt;2&lt;/a&gt;&lt;/sup&gt;. For example, the grammar can specify that JavaCC should recognize &lt;code&gt;knit 8&lt;/code&gt; as a valid expression, the jjtree information within that grammar spec will turn that expression into some object that semantically knows that the instruction was &lt;code&gt;knit&lt;/code&gt; and that there are &lt;code&gt;8&lt;/code&gt; stitches, which then becomes accessible information when interpreting the tree later. The AST classes defining such objects are auto-generated but can be overwritten to include the additional metadata.&lt;/p&gt;
&lt;h2 id="tooling"&gt;Tooling&lt;a class="headerlink" href="#tooling" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Working with JavaCC is a bit cumbersome by default. JavaCC reads a grammar specification, generates java code (the actual parser) which then needs to be compiled within the context of some other application in order to be useful. Java&amp;rsquo;s dependency managers help simplify this process.&lt;/p&gt;
&lt;p&gt;I made use of the JavaCC Compiler Plugin for Gradle&lt;sup id="fnref:javaccGradle"&gt;&lt;a class="footnote-ref" href="#fn:javaccGradle"&gt;3&lt;/a&gt;&lt;/sup&gt;. Configuration is easy, and the parser generator runs at build time before compiling the rest of the code so that the necessary files (parser and jjtree AST classes) are in place for the rest of the build.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="grammar-specification"&gt;Grammar specification&lt;a class="headerlink" href="#grammar-specification" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="tokens"&gt;Tokens&lt;a class="headerlink" href="#tokens" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first step in writing the grammar specification is to define some tokens. These are the regular expressions that the parser will recognize as valid strings in the grammar.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SKIP : { &amp;quot; &amp;quot; }
SKIP : { &amp;quot;\n&amp;quot; | &amp;quot;\r&amp;quot; | &amp;quot;\r\n&amp;quot; }
TOKEN : { &amp;lt; NUMBER : ([&amp;quot;0&amp;quot;-&amp;quot;9&amp;quot;])+ &amp;gt; }
TOKEN : { &amp;lt; CAST_ON : &amp;quot;cast on&amp;quot; | &amp;quot;co&amp;quot; | &amp;quot;caston&amp;quot;&amp;gt;}
TOKEN : { &amp;lt; KNIT : &amp;quot;knit&amp;quot; | &amp;quot;k&amp;quot; &amp;gt;}
TOKEN : { &amp;lt; KNITWISE : &amp;lt;KNIT&amp;gt; | &amp;quot;knitwise&amp;quot; &amp;gt;}
TOKEN : { &amp;lt; PURL : &amp;quot;purl&amp;quot; | &amp;quot;p&amp;quot; &amp;gt;}
TOKEN : { &amp;lt; PURLWISE : &amp;lt;PURL&amp;gt; | &amp;quot;purlwise&amp;quot; &amp;gt;}
TOKEN : { &amp;lt; TOG : &amp;quot;together&amp;quot; | &amp;quot;tog&amp;quot; &amp;gt; }
TOKEN : { &amp;lt; MAKE : &amp;quot;make&amp;quot; | &amp;quot;m&amp;quot; &amp;gt; }
TOKEN : { &amp;lt; LEFT : &amp;quot;left&amp;quot; | &amp;quot;l&amp;quot; &amp;gt; }
TOKEN : { &amp;lt; RIGHT : &amp;quot;right&amp;quot; | &amp;quot;r&amp;quot; &amp;gt; }
TOKEN : { &amp;lt; OPEN_PAR : &amp;quot;(&amp;quot; &amp;gt; }
TOKEN : { &amp;lt; CLOSE_PAR : &amp;quot;)&amp;quot; &amp;gt; }
TOKEN : { &amp;lt; QUALIFIER : &amp;quot;:&amp;quot; &amp;lt;OPEN_PAR&amp;gt; ([&amp;quot;a&amp;quot;-&amp;quot;z&amp;quot;,&amp;quot;A&amp;quot;-&amp;quot;Z&amp;quot;,&amp;quot;0&amp;quot;-&amp;quot;9&amp;quot;])+ &amp;lt;CLOSE_PAR&amp;gt; &amp;gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;SKIP&lt;/code&gt; tokens are used to tell the parser that those inputs are to be ignored, in this case white spaces and new lines (with and without carriage returns)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;NUMBER&amp;gt;&lt;/code&gt; token matches 1 or more repetitions of digits 0-9.&lt;/p&gt;
&lt;p&gt;Everything after is some combination of strings, where things that are semantically the same, such as &lt;code&gt;knit&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;, are parsed as the same token.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;QAULIFIER&amp;gt;&lt;/code&gt; token matches strings of the form &lt;code&gt;:(\w)&lt;/code&gt; where &lt;code&gt;\w&lt;/code&gt; is an alphanumeric &amp;ldquo;word&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;JavaCC gives precedence to tokens in the order they are defined. For this matter, since &lt;code&gt;&amp;lt;PURLWISE&amp;gt;&lt;/code&gt; also matches on the token for &lt;code&gt;&amp;lt;PURL&amp;gt;&lt;/code&gt; it needs to be defined after &lt;code&gt;&amp;lt;PURL&amp;gt;&lt;/code&gt;. Purlwise is a modifier used to describe an increase/decrease, and syntactically comes after declaring the stitch, i.e. &lt;code&gt;purl 3 make 1 purlwise&lt;/code&gt;. If the order were switched in defining these tokens, then the parser would output something like &lt;code&gt;purlwise 3 make 1 purl&lt;/code&gt;, which is garbage.&lt;/p&gt;
&lt;h2 id="expressionsproductions"&gt;Expressions/productions&lt;a class="headerlink" href="#expressionsproductions" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Parsing tokens by themselves do not provide us with enough information to do anything meaningful, the context in which they appear also needs to be considered! To do that, we define expressions (productions) that the parser will look for, which are strings of tokens to match.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s examine the expression for a basic stitch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;Stitch&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;Token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stitchType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;Token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;(stitchType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;CAST_ON&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stitchType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;KNIT&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stitchType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;PURL&amp;gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NUMBER&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Integer.parseInt(num.image)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(stitchType.kind)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CAST_ON&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;jjtThis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StitchType&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CAST_ON&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KNIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;jjtThis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StitchType&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KNIT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;jjtThis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StitchType&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PURL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="err"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;jjtThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;setNum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Lines 3 and 4 are just declaring variables to be used later.&lt;/p&gt;
&lt;p&gt;Lines 7 and 8 are the pattern to match. It checks for &lt;code&gt;CAST_ON&lt;/code&gt;, &lt;code&gt;KNIT&lt;/code&gt;, or &lt;code&gt;PURL&lt;/code&gt; and assigns that token to the &lt;code&gt;stitchType&lt;/code&gt; variable. It then looks for an optional &lt;code&gt;NUMBER&lt;/code&gt; token and assigns that to &lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, the parsed tokens are converted into more strongly typed objects, in this case &lt;code&gt;num&lt;/code&gt; becomes an &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;stitchType&lt;/code&gt; is mapped to the enum &lt;code&gt;StitchType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Associated with this production is an &lt;code&gt;AST&lt;/code&gt; (abstract syntax tree) class, a syntax tree node that extends &lt;code&gt;SimpleNode&lt;/code&gt;.&lt;sup id="fnref2:nmsu"&gt;&lt;a class="footnote-ref" href="#fn:nmsu"&gt;2&lt;/a&gt;&lt;/sup&gt; This is the object produced by the parser and represents the expression in the overall tree once the entire pattern has been parsed.  It can be auto-generated, or  pre-defined with additional fields. In this example, &lt;code&gt;ASTStitch&lt;/code&gt; has the fields &lt;code&gt;StitchType type&lt;/code&gt; and  &lt;code&gt;Integer num&lt;/code&gt;. The production&amp;rsquo;s node is accessible through &lt;code&gt;jjtThis&lt;/code&gt;, allowing those fields to be set in the parsing phase.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="interpreting-a-tree"&gt;Interpreting a tree&lt;a class="headerlink" href="#interpreting-a-tree" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now that the JavaCC parser generator has created a parser, and the parser has been used with JJTree to produce a tree, the tree still needs to be interpreted.&lt;/p&gt;
&lt;p&gt;The process is simple: work down leaves of the tree at the same level in order. For any leaf with children nodes (only repeats in this grammar), work through those children (in order again) the number of times specified by the repeat.&lt;/p&gt;
&lt;p&gt;While traversing the tree, any knitting instructions are executed via the &lt;a href="#a-knitting-api"&gt;knitting API&lt;/a&gt;. The implementation of the API determines what objects you build, in this case I&amp;rsquo;ve written two: a simple pattern class that keeps track of stitches and their neighbors (predecessors, successors, and parent/children links), and another that keeps track of the total number of stitches performed as a means to estimate total yarn yardage. This tree traversal effectively converts the input into a linear program, and would be every step a knitter performs in sequence when following a pattern.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;
&lt;span class="normal"&gt;15&lt;/span&gt;
&lt;span class="normal"&gt;16&lt;/span&gt;
&lt;span class="normal"&gt;17&lt;/span&gt;
&lt;span class="normal"&gt;18&lt;/span&gt;
&lt;span class="normal"&gt;19&lt;/span&gt;
&lt;span class="normal"&gt;20&lt;/span&gt;
&lt;span class="normal"&gt;21&lt;/span&gt;
&lt;span class="normal"&gt;22&lt;/span&gt;
&lt;span class="normal"&gt;23&lt;/span&gt;
&lt;span class="normal"&gt;24&lt;/span&gt;
&lt;span class="normal"&gt;25&lt;/span&gt;
&lt;span class="normal"&gt;26&lt;/span&gt;
&lt;span class="normal"&gt;27&lt;/span&gt;
&lt;span class="normal"&gt;28&lt;/span&gt;
&lt;span class="normal"&gt;29&lt;/span&gt;
&lt;span class="normal"&gt;30&lt;/span&gt;
&lt;span class="normal"&gt;31&lt;/span&gt;
&lt;span class="normal"&gt;32&lt;/span&gt;
&lt;span class="normal"&gt;33&lt;/span&gt;
&lt;span class="normal"&gt;34&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TreeInterpreter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KPattern&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ASTStitch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;castOn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTStitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jjtGetChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;castOn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StitchType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CAST_ON&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;castOn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jjtGetNumChildren&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;processNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jjtGetChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;processNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTStitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;ASTStitch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stitch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTStitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;basicStitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTRepeat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;ASTRepeat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTRepeat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jjtGetNumChildren&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;processNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jjtGetChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTDecrease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;ASTDecrease&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decrease&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTDecrease&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decrease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decrease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decrease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;decrease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDecreaseType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTIncrease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;ASTIncrease&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ASTIncrease&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIncreaseType&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The interpretation phase starts with the assumption that the first node in sequence will be &lt;code&gt;ASTStich&lt;/code&gt; with type &lt;code&gt;cast on&lt;/code&gt;. The API specifies an &lt;code&gt;init&lt;/code&gt; method that will set up the first cast on stitches, since they can behave differently than other stitches: they have no parents and joining in the round requires making non-standard links.&lt;/p&gt;
&lt;p&gt;Following that, nodes in the tree are processed by working down the tree. The only branching mechanism here is the &lt;code&gt;Repeat&lt;/code&gt; production, which recursively and repeatedly processes its children nodes. The other expressions map to constructs of the API, so the chosen implementation calls the associated method, passing the proper meta-data as gathered from the parsing step.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="a-knitting-api"&gt;A knitting API&lt;a class="headerlink" href="#a-knitting-api" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In much the same way the parser grammar was constructed, there needs to be something to map input into actual instructions. The API can be used for generating a pattern object for analyzing the final network of linked stitches, as a base for building a mesh representation of the knitted object to be loaded in some 3d visualization software, or really anything as long as it supports the following methods.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;void init(int numStitches, boolean join);&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Initial cast on of a project. It takes the number of stitches to initially cast on and whether to join in the round. The join param is still in process, the parser currently has no mechanism for identifying joins, and all implementations of this API default to being in the round.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Stitch basicStitch(StitchType type);&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Performs a stitch operation of StitchType type onto the current knitting pattern, i.e. knit, purl, cast on. It will return the stitch object it performed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;void decrease(StitchType type, int num, DecreaseType decreaseType);&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perform a decrease that combines num stitches together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;void increase(StitchType type, int num, IncreaseType increaseType);&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perform an increase of num stitches.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h1 id="visualization"&gt;Visualization&lt;a class="headerlink" href="#visualization" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Once a pattern has been parsed and interpreted into some data structure, it can then be visualized. The goal here is to convert a graph (a collection of vertices with weighted edges) into a 3d mesh, preserving edge weights as pairwise distances between vertices.&lt;/p&gt;
&lt;h2 id="naive-approach"&gt;Na&#239;ve approach&lt;a class="headerlink" href="#naive-approach" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The current linear time solution is to map stitches to coordinates in 3d space by estimating where they would be based on which row/round in the pattern the stitch is, and how many stitches are in a round. This will place each stitch on a circle with a radius determined by the number of working stitches. This is not very accurate for anything besides tubes.&lt;/p&gt;
&lt;figure class="figure"&gt;

&lt;img alt="naive hat" src="naive-hat.jpeg" /&gt;
&lt;img alt="mds hat" src="hat.jpeg" /&gt;
&lt;figcaption&gt;The na&#239;ve approach vs MDS for a &amp;ldquo;hat&amp;rdquo; pattern&lt;br/&gt;

&lt;code&gt;co20 (k20)5 (k2tog k4)5 (k2tog k3)4 (k2tog k2)3 k8tog&lt;/code&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice that it fails to consider the pull of neighboring stitches as decreases are performed, resulting in each round/row being equidistant (conical shape). Instead, as in the MDS case, the final form is much rounder.&lt;/p&gt;
&lt;figure class="figure"&gt;

&lt;img alt="real hat" src="real_hat.jpeg" /&gt;
&lt;figcaption&gt;An object in the real world&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The physical object turns out to be even stouter than either estimation.&lt;/p&gt;
&lt;h2 id="multidimensional-scaling"&gt;Multidimensional scaling&lt;a class="headerlink" href="#multidimensional-scaling" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An alternate solution is through constructing a dissimilarity matrix based on distance along the surface of the knitted object as represented as walks on the graph of stitches (with edge weights determined by stitch type). This matrix is constructed by finding the shortest paths between each set of points, and then through multidimensional scaling (aka principal coordinate analysis) it can estimate coordinates in euclidean space.&lt;/p&gt;
&lt;h3 id="why-should-this-work"&gt;Why should this work?&lt;a class="headerlink" href="#why-should-this-work" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MDS takes &lt;code&gt;n&lt;/code&gt; data points in &lt;code&gt;m&lt;/code&gt; space, and reduces it to an &lt;code&gt;nxr&lt;/code&gt; matrix for some chosen value of &lt;code&gt;r&lt;/code&gt;, trying to preserve pairwise ditances between each of the &lt;code&gt;n&lt;/code&gt; points. Generally the &lt;code&gt;m&lt;/code&gt; coordinates of a datapoint is some collection of meta-data. As an example, it could be results of a survey on cheeses, each datapoint corresponds to a cheese, and is a vector of measures like (hardness, scent, nuttiness, age, fat percentage, tonnage produced per year). &lt;/p&gt;
&lt;p&gt;We could then reduce these 6 dimensions to 2 by performing MDS. The dissimilarity matrix is simply made up of entries that are the pairwise euclidean distance in &lt;span class="arithmatex"&gt;\(\mathbb{R}^6\)&lt;/span&gt; between each cheese type. The resulting &lt;code&gt;nx2&lt;/code&gt; matrix maps each of the &lt;code&gt;n&lt;/code&gt; cheeses to only 2 dimensions, the semantics of which we don&amp;rsquo;t know. But the beauty of MDS is that this dimensionality reduction may show some pattern in the data: there could be a strong correlation between hardness, age, and nuttiness so cheeses that had similar values in all three of those categories, may be mapped to similar locations in 2-space.&lt;/p&gt;
&lt;p&gt;Now back to the case of knitting, the dissimilarity matrix is the collection of shortest-paths between each point. Path length is itself a measure of distance, so the resulting 3-space coordinates from MDS will be strongly tied to this relative distance as it tries to preserve each pairwise path-distance now with a new (euclidean) metric. &lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;img alt="flat-hat" src="flat-hat.jpeg" /&gt;
&lt;figcaption&gt;2d projection of the "hat" pattern&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="constructing-a-distance-matrix"&gt;Constructing a distance matrix&lt;a class="headerlink" href="#constructing-a-distance-matrix" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first step in performing MDS is constructing a dissimilarity matrix &lt;span class="arithmatex"&gt;\(M\)&lt;/span&gt; given the graph &lt;span class="arithmatex"&gt;\(P\)&lt;/span&gt; of stitches &lt;span class="arithmatex"&gt;\(s_i\)&lt;/span&gt; in the pattern. Each entry &lt;span class="arithmatex"&gt;\(e_ij \in M\)&lt;/span&gt; is the distance &lt;span class="arithmatex"&gt;\(d(s_i,s_j)\)&lt;/span&gt; for stitches &lt;span class="arithmatex"&gt;\(s_i,s_j\in P\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;There are many ways to define distance, but in this case we consider it to be the shortest path between stitches in the graph. For the initial phase of this project we assume that if &lt;span class="arithmatex"&gt;\(s_i\)&lt;/span&gt; and &lt;span class="arithmatex"&gt;\(s_j\)&lt;/span&gt;  share an edge (i.e. are neighbors), then the length of that edge is &lt;span class="arithmatex"&gt;\(1\)&lt;/span&gt;. In real life, this number is likely to be different depending on the type of stitches &amp;mdash; switching between knits and purls produces ribbing that is more elastic than stockinette (straight knits or purls in the round), which suggests that the distance between knits and purls is shorter than that between stitches of the same type. Additionally, left-right distances are often longer than up-down.&lt;/p&gt;
&lt;p&gt;Finding the shortest path on a graph is a well known problem in computer science, and there are multiple algorithms that may be helpful.&lt;/p&gt;
&lt;h4 id="depth-limited-bfs"&gt;Depth limited BFS&lt;a class="headerlink" href="#depth-limited-bfs" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This implementation arose from the goal to build fast without worrying about complexity or problems with scale. It performs breadth-first search starting from each stitch, initialized with its neighbors in the queue. This search is limited to a fixed number of hops from the source, and the distance matrix is updated with the shortest path found between the source and the node.&lt;/p&gt;
&lt;p&gt;It relies on the assumption that edges are positive, non-zero lengths and that the graph is connected. &lt;/p&gt;
&lt;p&gt;The distance matrix can be rather sparse with this algorithm. Since not all stitches will connect in a path shorter than the limited depth, the matrix will potentially have several 0 distance entries. The MDS algorithm needs to be aware that these 0 distances are not that the stitches are superimposed, but instead that their relative effect on each-other is negligible. &lt;/p&gt;
&lt;p&gt;It is incredibly inefficient. But works fine enough on smaller graphs that it filled the need as I built out other parts of the system.&lt;/p&gt;
&lt;h4 id="floyd-warshall4"&gt;Floyd-Warshall&lt;sup id="fnref:rosen"&gt;&lt;a class="footnote-ref" href="#fn:rosen"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;a class="headerlink" href="#floyd-warshall4" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Consider &lt;span class="arithmatex"&gt;\(G\)&lt;/span&gt;, a directed weighted graph with no negative cycles on &lt;span class="arithmatex"&gt;\(n\)&lt;/span&gt; vertices. The Floyd-Warshall algorithm finds all pairwise-shortest paths between each of the n vertices in &lt;span class="arithmatex"&gt;\(\mathcal{O}(n^3)\)&lt;/span&gt; time. The basic principle is that it checks if the known distance between two vertices, &lt;span class="arithmatex"&gt;\(j\)&lt;/span&gt; and &lt;span class="arithmatex"&gt;\(k\)&lt;/span&gt;, can be made shorter by going through an intermediary vertex &lt;span class="arithmatex"&gt;\(i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Space is bounded by the distance matrix, so it&amp;rsquo;s necessarily &lt;span class="arithmatex"&gt;\(\mathcal{O}(n^2)\)&lt;/span&gt;.&lt;sup id="fnref:floydNote"&gt;&lt;a class="footnote-ref" href="#fn:floydNote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nxn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;values&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;infinity&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e_ij&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;G&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e_ij&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j,k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h4 id="repeated-dijkstras"&gt;Repeated Dijkstra&amp;rsquo;s&lt;a class="headerlink" href="#repeated-dijkstras" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Dijkstra&amp;rsquo;s algorithm produces the shortest path tree for vertex &lt;span class="arithmatex"&gt;\(s_i\)&lt;/span&gt; to all &lt;span class="arithmatex"&gt;\(s_j\)&lt;/span&gt; in graph &lt;span class="arithmatex"&gt;\(G\)&lt;/span&gt;&lt;sup id="fnref:dijkstraNote"&gt;&lt;a class="footnote-ref" href="#fn:dijkstraNote"&gt;6&lt;/a&gt;&lt;/sup&gt;. Running this algorithm for each vertex in &lt;span class="arithmatex"&gt;\(G\)&lt;/span&gt; then would be enough to generate a dissimilarity matrix for the whole graph.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nx1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;
&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;G&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;infinity&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;each&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;still&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e_uv&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="n"&gt;#e_uv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;between&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;On graph &lt;span class="arithmatex"&gt;\(G\)&lt;/span&gt; with &lt;span class="arithmatex"&gt;\(n\)&lt;/span&gt; vertices and &lt;span class="arithmatex"&gt;\(m\)&lt;/span&gt; edges, the base operation of the algorithm is &lt;span class="arithmatex"&gt;\(\mathcal{O}(n^2)\)&lt;/span&gt; for a single vertex in &lt;span class="arithmatex"&gt;\(G\)&lt;/span&gt;, so total complexity is &lt;span class="arithmatex"&gt;\(\mathcal{O}(n^3)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This can be improved using a min priority queue, reducing base complexity to &lt;span class="arithmatex"&gt;\(\mathcal{O}(m + n\log{n})\)&lt;/span&gt; and total to &lt;span class="arithmatex"&gt;\(\mathcal{O}(nm + n^2\log{n})\)&lt;/span&gt;&lt;sup id="fnref:dijkstras"&gt;&lt;a class="footnote-ref" href="#fn:dijkstras"&gt;7&lt;/a&gt;&lt;/sup&gt;, I have yet to do this, but it is promising, as most stitches are only connected to 4 others (a parent, a predecessor, a successor, and a child), so the &lt;span class="arithmatex"&gt;\(m\)&lt;/span&gt; term is likely on the same order as &lt;span class="arithmatex"&gt;\(n\)&lt;/span&gt; for most valid patterns.&lt;/p&gt;
&lt;h4 id="johnsons-algorithm8"&gt;Johnson&amp;rsquo;s algorithm&lt;sup id="fnref:johnsons"&gt;&lt;a class="footnote-ref" href="#fn:johnsons"&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;a class="headerlink" href="#johnsons-algorithm8" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I haven&amp;rsquo;t implemented this algorithm. It supposedly is also &lt;span class="arithmatex"&gt;\(\mathcal{O}(nm + n^2\log{n})\)&lt;/span&gt; for a graph on &lt;span class="arithmatex"&gt;\(n\)&lt;/span&gt; vertices with &lt;span class="arithmatex"&gt;\(m\)&lt;/span&gt; edges.&lt;/p&gt;
&lt;h3 id="performing-mds"&gt;Performing MDS&lt;a class="headerlink" href="#performing-mds" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a dissimilarity matrix in hand we can now use multidimensional scaling to map our vertices into 3d euclidean space. &lt;/p&gt;
&lt;p&gt;There are a few publicly available libraries that implement MDS. An opensource java library is available from the University of Konstanz&lt;sup id="fnref:mdsj"&gt;&lt;a class="footnote-ref" href="#fn:mdsj"&gt;9&lt;/a&gt;&lt;/sup&gt;, although I opted not to use this one because I was unsure of what licensing (if any) that I wanted to use here. &lt;/p&gt;
&lt;p&gt;Instead, I made use of the python scikit-learn&lt;sup id="fnref:sklearn"&gt;&lt;a class="footnote-ref" href="#fn:sklearn"&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;sup id="fnref:sklearnUG"&gt;&lt;a class="footnote-ref" href="#fn:sklearnUG"&gt;11&lt;/a&gt;&lt;/sup&gt; library, a collection of ai/data tools built around numpy, scipy, and matplotlib.&lt;/p&gt;
&lt;h4 id="metric-vs-non-metric"&gt;Metric vs non-metric&lt;a class="headerlink" href="#metric-vs-non-metric" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The scikit docs explain it better than I can&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Metric MDS, the input similarity matrix arises from a metric (and thus respects the triangular inequality), the distances between output two points are then set to be as close as possible to the similarity or dissimilarity data. In the non-metric version, the algorithms will try to preserve the order of the distances, and hence seek for a monotonic relationship between the distances in the embedded space and the similarities/dissimilarities.&lt;sup id="fnref2:sklearnUG"&gt;&lt;a class="footnote-ref" href="#fn:sklearnUG"&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A key part of these distinctions is that non-metric mds can have 0-weighted edge length to indicate missing values. This allows for an incomplete dissimilarity matrix as would be the case for &lt;a href="#depth-limited-bfs"&gt;depth limited bfs&lt;/a&gt;. This also opens the door to limit other algorithms, possibly reducing their overall runtime complexity.&lt;/p&gt;
&lt;p&gt;The following figures are the output of the pattern &lt;code&gt;co20 (k20)10 (k2tog k5)18&lt;/code&gt;, using the repeated Dijkstra&amp;rsquo;s algorithm for generating the dissimilarity matrix.&lt;/p&gt;
&lt;p&gt;I found that non-metric mds does not do well unsupervised, and is better suited for refining coordinates rather than generating them.&lt;/p&gt;
&lt;figure class="figure"&gt;

&lt;img alt="mds non metric un-initialized" src="mds-non-metric-uninit.jpeg" /&gt;
&lt;img alt="mds non metric initialized" src="mds-non-metric-init.jpeg" /&gt;

&lt;figcaption&gt;Uninitialized non-metric MDS vs initialized&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Wow that&amp;rsquo;s a big difference! And this is using a complete dissimilarity matrix.&lt;/p&gt;
&lt;p&gt;As for metric MDS, the algorithm is able to infer the general shape without any prior coordinate information! Furthermore, initialization only makes a subtle difference.&lt;/p&gt;
&lt;figure class="figure"&gt;
&lt;img alt="mds metric un-initialized" src="mds-metric-uninit.jpeg" /&gt;
&lt;img alt="mds metric initialized" src="mds-metric-init.jpeg" /&gt;
&lt;figcaption&gt;Uninitialized metric MDS vs initialized&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One thing to note is that in both the initialized and uninitialized metric case, there is an observed flaring near the bottom of each graph which is not present in the non-metric initialized output, and we actually get the opposite effect in real life.&lt;/p&gt;
&lt;figure class="figure"&gt;

&lt;img alt="funnel hat" src="real_funnel.jpeg" /&gt;
&lt;figcaption&gt;The knitted funnel "hat", complete with pom-pom&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="computational-limitations"&gt;Computational limitations&lt;a class="headerlink" href="#computational-limitations" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="shortest-path-graph" src="shortest-path-graph.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, this is not a cheap analysis to perform. The shortest path algorithms all are &lt;span class="arithmatex"&gt;\(\mathcal{O}(n^3)\)&lt;/span&gt; for &lt;span class="arithmatex"&gt;\(n\)&lt;/span&gt; stitches (although this can be improved given the assumption that we don&amp;rsquo;t have a complete&lt;sup id="fnref:completeGraph"&gt;&lt;a class="footnote-ref" href="#fn:completeGraph"&gt;12&lt;/a&gt;&lt;/sup&gt; graph, as seen with Floyd-Warshall, Dijkstra&amp;rsquo;s, and Johnson&amp;rsquo;s). There are other algorithms than have stricter requirements on the starting graphs with better bounds, that may be applicable to this use case, see Raman&lt;sup id="fnref:raman"&gt;&lt;a class="footnote-ref" href="#fn:raman"&gt;13&lt;/a&gt;&lt;/sup&gt; and Thorup&lt;sup id="fnref:thorup"&gt;&lt;a class="footnote-ref" href="#fn:thorup"&gt;14&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Space also becomes an issue as patterns become larger. Everything is bounded below by the size of the dissimilarity matrix, which is &lt;span class="arithmatex"&gt;\(\mathcal{O}(n^2)\)&lt;/span&gt;. Since I want to support non-integer distances (knit-knit edges are longer than knit-purl), I&amp;rsquo;ve opted to use the &lt;code&gt;double&lt;/code&gt; type in java. This is an 8 byte type, if we take a max heap size for the jvm of 2gb and assume our &lt;code&gt;double[][]&lt;/code&gt; array can use it all with no overhead from the rest of the app, we&amp;rsquo;re looking 2e+9 bytes = 250000000 doubles = (roughly) 15811 stitches. This is under the median number of stitches in a sweater (20,000)&lt;sup id="fnref:fruehwald"&gt;&lt;a class="footnote-ref" href="#fn:fruehwald"&gt;15&lt;/a&gt;&lt;/sup&gt; and already the problem is feasibly incalculable! Switching the type to &lt;code&gt;int&lt;/code&gt;, at 4 bytes, would get us to some 22360 stitches in that 2gb space, but the math doesn&amp;rsquo;t bode well for scaling. I could switch data types to use a disk-backed array, but I fear that time considerations would only be made worse with constant lookups.&lt;/p&gt;
&lt;p&gt;Classical MDS might not be a tenable solution for larger datasets. As an alternative, there are a few algorithms that approximate MDS without needing the entire dissimilarity matrix in memory, or the large time constraints&lt;sup id="fnref:delicado"&gt;&lt;a class="footnote-ref" href="#fn:delicado"&gt;16&lt;/a&gt;&lt;/sup&gt;. An interpolation-based algorithm using Gowler&amp;rsquo;s interpolation forumla&lt;sup id="fnref:gowler"&gt;&lt;a class="footnote-ref" href="#fn:gowler"&gt;17&lt;/a&gt;&lt;/sup&gt; seems a promising solution but still holds a lot to be explored. My current concerns are: I&amp;rsquo;ve never used R, and the implementation provided by Delicado implicitly uses the euclidean distance on subsets of the data &amp;ndash; I&amp;rsquo;d have to re-implement the shortest path metric, repeated Dijktra&amp;rsquo;s is a strong contender since that one can be modified so as not to produce the entire &lt;code&gt;nxn&lt;/code&gt; dissimilarity matrix, but possibly Johnson&amp;rsquo;s, Raman, or Thorup may work as well.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="closing-thoughts"&gt;Closing thoughts&lt;a class="headerlink" href="#closing-thoughts" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Altogether, I am quite happy with how this project has been coming along. The parser-generator can interpret patterns closely resembling those in the real world, the knitting API is simple enough to be implemented multiple ways, but expressive enough to capture key information about a knitting pattern, and the visualization via both geometric and statistical methods produce a plausible 3d representation of a knitted object.&lt;/p&gt;
&lt;p&gt;Of course, there is still a lot to improve on. So many features to implement from the parsing side: cables, stranded color work, short rows, flat knitting, intarsia, lacework, etc. Expanding the API to support all of those will likely introduce some complexity &amp;ndash; particularly the color work seems troublesome. And then finally reflecting those new features in the visualization will undoubtedly have its issues. Beyond that, performance enhancements for MDS on larger data sets depend on rethinking the approach from the classical implementation to one of the algorithms given in Delicado&lt;sup id="fnref2:delicado"&gt;&lt;a class="footnote-ref" href="#fn:delicado"&gt;16&lt;/a&gt;&lt;/sup&gt;. I&amp;rsquo;ve also done some simulation work with Blender with the na&#239;ve visualization approach, but haven&amp;rsquo;t updated it to use the output of MDS. Improving the mesh generation part of that code to produces proper edges and faces would be ideal, and using the fabric simulator there may produce interesting results.&lt;/p&gt;
&lt;h1 id="references-and-notes"&gt;References and Notes&lt;a class="headerlink" href="#references-and-notes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:javacc"&gt;
&lt;p&gt;Java Compiler Compiler &lt;a href="https://javacc.github.io/javacc/"&gt;docs&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:javacc" title="Jump back to footnote 1 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:nmsu"&gt;
&lt;p&gt;Roger Hartley. Writing Interpreters with JavaCC. New Mexico State University. &lt;a href="https://www.cs.nmsu.edu/~rth/cs/cs471/InterpretersJavaCC.html"&gt;site&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:nmsu" title="Jump back to footnote 2 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:nmsu" title="Jump back to footnote 2 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:javaccGradle"&gt;
&lt;p&gt;JavaCC Compiler Plugin for Gradle &lt;a href="https://github.com/javacc/javaccPlugin"&gt;repo&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:javaccGradle" title="Jump back to footnote 3 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:rosen"&gt;
&lt;p&gt;Keneth H Rosen. Discrete Mathematics and Its Applications (With Combinatorics and Graph Theory), Seventh Edition. Graphs, section 8.6 Shortest-Path Problems. McGraw Hill.&amp;#160;&lt;a class="footnote-backref" href="#fnref:rosen" title="Jump back to footnote 4 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:floydNote"&gt;
&lt;p&gt;&lt;em&gt;I present these bounds as fact, but you can verify yourself.&lt;/em&gt; Further reading on Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Floyd&#8211;Warshall_algorithm"&gt;Floyd-Warshall algorithm&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:floydNote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dijkstraNote"&gt;
&lt;p&gt;&lt;em&gt;The original variant only produced the shortest path from &lt;span class="arithmatex"&gt;\(s_i\)&lt;/span&gt; to &lt;span class="arithmatex"&gt;\(s_j\)&lt;/span&gt;.&lt;/em&gt; See more on Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra&amp;rsquo;s algorithm&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:dijkstraNote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:dijkstras"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra&amp;rsquo;s algorithm&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:dijkstras" title="Jump back to footnote 7 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:johnsons"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Johnson%27s_algorithm"&gt;Johnson&amp;rsquo;s algorithm&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:johnsons" title="Jump back to footnote 8 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mdsj"&gt;
&lt;p&gt;Algorithmics Group. MDSJ: Java Library for Multidimensional Scaling (Version 0.2). Available &lt;a href="http://www.inf.uni-konstanz.de/algo/software/mdsj/"&gt;here&lt;/a&gt;. University of Konstanz, 2009.&amp;#160;&lt;a class="footnote-backref" href="#fnref:mdsj" title="Jump back to footnote 9 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sklearn"&gt;
&lt;p&gt;Scikit Learn. &lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html"&gt;MDS Docs&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:sklearn" title="Jump back to footnote 10 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sklearnUG"&gt;
&lt;p&gt;Scikit Learn. &lt;a href="https://scikit-learn.org/stable/modules/manifold.html#multi-dimensional-scaling-mds"&gt;MDS User Guide&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:sklearnUG" title="Jump back to footnote 11 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:sklearnUG" title="Jump back to footnote 11 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:completeGraph"&gt;
&lt;p&gt;&lt;em&gt;Every pair of vertices is connected with an edge.&lt;/em&gt; See Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Complete_graph"&gt;Complete graph&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:completeGraph" title="Jump back to footnote 12 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:raman"&gt;
&lt;p&gt;Rajeev Raman. Recent results on the single-source shortest paths problem. 1997. &lt;a href="https://dl.acm.org/doi/10.1145/261342.261352"&gt;doi&lt;/a&gt;. &lt;a href="https://dl.acm.org/doi/pdf/10.1145/261342.261352"&gt;pdf&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:raman" title="Jump back to footnote 13 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:thorup"&gt;
&lt;p&gt;Mikkel Thorup. On RAM Priority Queues. 2000. &lt;a href="https://epubs.siam.org/doi/10.1137/S0097539795288246"&gt;doi&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:thorup" title="Jump back to footnote 14 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:fruehwald"&gt;
&lt;p&gt;Joesf Fruehwald. How Long Does it Take You to Knit a Sweater. 13 Jan, 2020. &lt;a href="https://medium.com/@JoFrhwld/how-long-does-it-take-you-to-knit-a-sweater-74e35cf5c3c1#:~:text=It%27s%20important%20to%20keep%20the,number%20of%20stitches%20is%2020k"&gt;Article&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:fruehwald" title="Jump back to footnote 15 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:delicado"&gt;
&lt;p&gt;Pedro Delicado, Cristian Pach&#243;n-Garc&#237;a. Multidimensional Scaling for Big Data. 2024. &lt;a href="https://arxiv.org/abs/2007.11919"&gt;arXiv:2007.11919&lt;/a&gt;. &lt;a href="https://doi.org/10.48550/arXiv.2007.11919"&gt;doi&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:delicado" title="Jump back to footnote 16 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:delicado" title="Jump back to footnote 16 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:gowler"&gt;
&lt;p&gt;Gowler, J.C. Adding a point to vector diagrams in multivariate analysis. 1968. Biometrika 55(3): 582-585. &lt;a href="https://www.jstor.org/stable/2334268"&gt;jsotr&lt;/a&gt;. &lt;em&gt;(I haven&amp;rsquo;t actually read this one, but it seemed helpful to link for further work)&lt;/em&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:gowler" title="Jump back to footnote 17 in the text"&gt;&amp;#8617&amp;#xFE0E&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/programming/knitting/index.html" />
  </entry>
  <entry>
    <title>Enchanted Rock</title>
    <id>paintings/enchanted_rock/index.html</id>
    <updated>2023-12-01T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Enchanted Rock" src="EnchantedRock.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6"x9"&lt;/code&gt; oil on linen paper&lt;/p&gt;
&lt;p&gt;View of Enchanted Rock in Fredericksburg, TX.&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/enchanted_rock/index.html" />
  </entry>
  <entry>
    <title>Tank Light</title>
    <id>furniture/lighting/tank-light/index.html</id>
    <updated>2023-11-30T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Tank light" src="light1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;This light was initially meant to serve as the main light on my fish tank. Unfortunately I made it too bright and algae growth was faster than I wanted to deal with, so now it serves as ambient lighting in my hallway.&lt;/p&gt;
&lt;p&gt;Construction was generally straight forward. The main section of the light is large oak board with routed channels in which led strip lights sit. The &amp;lsquo;legs&amp;rsquo; of the lamp (what used to sit on top of the tank) are also oak, notched out with a hand saw and chisel to that the top sits flush with the main piece.&lt;/p&gt;
&lt;p&gt;The led strips are all cut from the same ikea &lt;a href="https://www.ikea.com/us/en/p/myrvarv-led-light-strip-flexible-dimmable-90487191/"&gt;MYRVARV&lt;/a&gt; strip and powered by an &lt;a href="https://www.ikea.com/us/en/p/ansluta-led-driver-with-cord-white-90405845/"&gt;ANSLUTA&lt;/a&gt; driver. I had to solder the individual tracks together with some spare wire in order to light everything. The strips are held in place with hot glue.&lt;/p&gt;
&lt;p&gt;There is another driver that supports dimming, so this may get resurrected as a tank light in the future, but for now I am happy with the light it gives in my hallway.&lt;/p&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="Tank" src="tank1.jpeg" /&gt;
        &lt;img alt="Tank light front" src="light2.jpeg" /&gt;
        &lt;img alt="Tank light underside" src="light4.jpeg" /&gt;
        &lt;img alt="LED wiring" src="light3.jpeg" /&gt;
        &lt;img alt="LED wiring 2" src="light5.jpeg" /&gt;
        &lt;img alt="LED wiring 2" src="light6.jpeg" /&gt;
        &lt;img alt="Tank" src="tank2.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/furniture/lighting/tank-light/index.html" />
  </entry>
  <entry>
    <title>Christmas Tree Base</title>
    <id>furniture/tree-base/index.html</id>
    <updated>2023-11-24T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="base1" src="base1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;I made this christmas tree base about 2 years ago now. The construction was simple, just some pine boards cut into triangles, joined into rhombuses, and then glued again into halves to fit around the tree. Each rhombus was planed by hand so that the long diagonal was higher. I cut out the center with a chisel so that the tree could sit on a flatter surface. The base of the tree sits in spray-painted tin can. &lt;/p&gt;
&lt;section class="gallery"&gt;
    &lt;div markdown&gt;
        &lt;img alt="base2" src="base2.jpeg" /&gt;
        &lt;img alt="base3" src="base3.jpeg" /&gt;
        &lt;img alt="base4" src="base4.jpeg" /&gt;
        &lt;img alt="base5" src="base5.jpeg" /&gt;
    &lt;/div&gt;
&lt;/section&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/furniture/tree-base/index.html" />
  </entry>
  <entry>
    <title>[Update] Big Bent Lamp</title>
    <id>furniture/lighting/bigBentLampUpdate.html</id>
    <updated>2023-11-24T00:00:00Z</updated>
    <content type="html">&lt;p&gt;Just a quick update on the status of my &lt;a href="/furniture/lighting/bigBentLamp.html"&gt;big bent lamp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Big Bent Lamp" src="bigBentUpdate2.jpeg" /&gt;
I wasn&amp;rsquo;t a big fan of the pink shade so I swapped it out for a pleated paper shade.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Big Bent Lamp" src="bigBentUpdate1.jpeg" /&gt;
The weight of the shade ended up being too much for kerf bend at the base to handle, and the lamp ended up snapping when a slight breeze from the patio door caused the shade to swing.&lt;/p&gt;
&lt;p&gt;The original freestanding lamp was not salvageable (glue did not work). Instead, I opted to lop off the original base and mount the remainder to the wall. 
&lt;img alt="Big Bent Lamp" src="bigBentUpdate3.jpeg" /&gt;&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/furniture/lighting/bigBentLampUpdate.html" />
  </entry>
  <entry>
    <title>Sake</title>
    <id>paintings/sake/index.html</id>
    <updated>2023-09-23T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Sake" src="sake.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5"x8"&lt;/code&gt; oil on canvas paper&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/sake/index.html" />
  </entry>
  <entry>
    <title>Goose</title>
    <id>paintings/goose/index.html</id>
    <updated>2023-09-23T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Goose" src="goose.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5"x8"&lt;/code&gt; oil on canvas paper&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/goose/index.html" />
  </entry>
  <entry>
    <title>Studies</title>
    <id>paintings/studies/index.html</id>
    <updated>2023-09-16T00:00:00Z</updated>
    <content type="html">&lt;p&gt;A series of studies I did&lt;/p&gt;
&lt;h2 id="still-life-in-my-living-room"&gt;Still Life in My Living Room&lt;a class="headerlink" href="#still-life-in-my-living-room" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Living room" src="living_room.jpeg" /&gt;
&lt;code&gt;6.5"x8"&lt;/code&gt; oil on canvas paper&lt;/p&gt;
&lt;h2 id="mums"&gt;Mums&lt;a class="headerlink" href="#mums" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mums" src="mums.jpeg" /&gt;
&lt;code&gt;8.5"x6"&lt;/code&gt; oil on canvas paper&lt;/p&gt;
&lt;h2 id="snow-golem-near-work"&gt;Snow Golem Near Work&lt;a class="headerlink" href="#snow-golem-near-work" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Snow golem" src="snow_golem.jpeg" /&gt;
&lt;code&gt;6"x7.5"&lt;/code&gt; oil on canvas paper&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/studies/index.html" />
  </entry>
  <entry>
    <title>Moonlight</title>
    <id>paintings/moonlight/index.html</id>
    <updated>2023-09-10T00:00:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img alt="Moonlight" src="moon.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;7"x4"&lt;/code&gt; oil on canvas paper&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/moonlight/index.html" />
  </entry>
  <entry>
    <title>Passing View on County Road G</title>
    <id>paintings/barn/index.html</id>
    <updated>2023-09-10T00:00:00Z</updated>
    <content type="html">&lt;p&gt;Germantown WI&lt;/p&gt;
&lt;p&gt;&lt;img alt="Barn, study" src="barn.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5.25"x6.5"&lt;/code&gt; oil on canvas paper&lt;/p&gt;
&lt;p&gt;&lt;img alt="Study and reproduction" src="mother_and_child.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;I tried my hand at painting it larger, but am not too fond of the outcome.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Barn" src="barn_big.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;16"x20"&lt;/code&gt; oil on canvas&lt;/p&gt;</content>
    <link rel="alternate" href="https://blog.ryanramsdell.dev/paintings/barn/index.html" />
  </entry>
</feed>